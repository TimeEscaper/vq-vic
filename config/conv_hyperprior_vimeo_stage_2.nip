experiment_params:
#  dataset_root: &dataset_root "/storage/datasets/celeba_hq_256"
#  path: &path "/storage/experiments"
#  pretrained_ae_path: &pretrained_ae_path "/storage/experiments/remote/vq/VQVIC-40/checkpoint.ckpt"
  path: &path "/data/shared/svc/experiments"
  pretrained_path: &pretrained_path "/data/shared/svc/pretrained/vq_vae/VQVIC-111/checkpoint.ckpt"
  dataset_root: &dataset_root "/data/shared/svc/datasets/vimeo90k/vimeo_septuplet"
  dataloader_workers: &dataloader_workers 12
  image_resolution: &image_resolution (256, 256)

  gpu: &gpu 1

  lr: &lr 1e-3
  # wd: &wd 1e-2
  epochs: &epochs 1000
  batch_size: &batch_size 12

  n_residual_blocks: &n_residual_blocks 3

  lmbda: &lmbda 2048


### Trainer
trainer: !Trainer
  deterministic: False
  benchmark: True
  gpus: `[gpu]`
  max_epochs: *epochs
  logger: !NeptuneLogger
    project: timeescaper/vq-vic
    log_model_checkpoints: True
    tags:
      - "conv_hyper"
      - "vimeo"
  callbacks:
    - !ModelCheckpoint
      save_top_k: 1
      save_last: True
      every_n_epochs: 1
      monitor: "val_loss"
  check_val_every_n_epoch: 5
  log_every_n_steps: 1


### Datasets
train_dataset: &train_dataset !VimeoImagesDataset
  sequences_root: `f"{dataset_root}/sequences"`
  subset_list: `f"{dataset_root}/sep_trainlist.txt"`
  segment: (0, 10000)
  transform: !Compose
    transforms:
      - !CenterCrop
        size: *image_resolution
      - !ToTensor

val_dataset: &val_dataset !VimeoImagesDataset
  sequences_root: `f"{dataset_root}/sequences"`
  subset_list: `f"{dataset_root}/sep_testlist.txt"`
  segment: (0, 500)
  transform: !Compose
    transforms:
      - !CenterCrop
        size: *image_resolution
      - !ToTensor

train_dataloader: !DataLoader
  dataset: *train_dataset
  batch_size: *batch_size
  shuffle: true
  num_workers: *dataloader_workers

val_dataloader: !DataLoader
  dataset: *val_dataset
  batch_size: *batch_size
  shuffle: false
  num_workers: *dataloader_workers


# Model
encoder: &encoder !ConvEncoder
  channels: (64, 128)
  n_residual_blocks: *n_residual_blocks

hyper_encoder: &hyper_encoder !ConvEncoder
  channels: (64,)
  in_channels: 128
  n_residual_blocks: *n_residual_blocks

decoder: &decoder !ConvDecoder
  channels: `(128, 64)`
  n_residual_blocks: *n_residual_blocks

hyper_decoder: &hyper_decoder !ConvDecoder
  channels: `(64,)`
  out_channels: 128
  n_residual_blocks: *n_residual_blocks

model_template: &model_template !ConvScaleHyperpriorModel
  encoder: *encoder
  decoder: *decoder
  hyper_encoder: *hyper_encoder
  hyper_decoder: *hyper_decoder

model: &model !pretrained
  model: *model_template
  eval_mode: false
  freeze_model: false
  module_name: "_model"
  ckpt_path: *pretrained_path


# Loss
# dist_loss: &dist_loss !MSEWrapLoss
# rate_loss: &rate_loss !RateLoss
aux_loss: &aux_loss !AuxLoss
loss: &loss !CompositeLoss
  components: `[(aux_loss, 1.)]`


### Lightning Module
pl_module: !LitAutoEncoderModule
  model: *model
  optimizer: !Adam
    lr: *lr
    params: `model.aux_parameters()`
  loss: *loss
  sample_train: `train_dataset[0]`
  sample_val: `val_dataset[0]`
