experiment_params: 
  path: &path "TODO: path where your experiment will be stored"
  dataset_root: &dataset_root "TODO: Path to the root of the Vimeo90k dataset"
  pretrained_stage_1_path: &pretrained_stage_1_path "TODO: Path to the .ckpt checkoint from your Stage 1 results"

  dataloader_workers: &dataloader_workers 12
  image_resolution: &image_resolution (256, 256)

  gpu: &gpu 0  # You may change the GPU
  lr: &lr 0.001
  epochs: &epochs 1000
  batch_size: &batch_size 12

  n_residual_blocks: &n_residual_blocks 3
  lmbda: &lmbda 2048


trainer: !Trainer 
  deterministic: False
  benchmark: True
  gpus: `[gpu]`
  max_epochs: *epochs
  callbacks: 
    - !ModelCheckpoint 
      save_top_k: 1
      save_last: True
      every_n_epochs: 1
      monitor: "val_loss"
  check_val_every_n_epoch: 5
  log_every_n_steps: 1


train_dataset: &train_dataset !VimeoImagesDataset 
  sequences_root: `f"{dataset_root}/sequences"`
  subset_list: `f"{dataset_root}/sep_trainlist.txt"`
  transform: !Compose 
    transforms: 
      - !CenterCrop 
        size: *image_resolution
      - !ToTensor 
  
val_dataset: &val_dataset !VimeoImagesDataset 
  sequences_root: `f"{dataset_root}/sequences"`
  subset_list: `f"{dataset_root}/sep_testlist.txt"`
  transform: !Compose 
    transforms: 
      - !CenterCrop 
        size: *image_resolution
      - !ToTensor 

train_dataloader: !DataLoader 
  dataset: *train_dataset
  batch_size: *batch_size
  shuffle: True
  num_workers: *dataloader_workers

val_dataloader: !DataLoader 
  dataset: *val_dataset
  batch_size: *batch_size
  shuffle: False
  num_workers: *dataloader_workers


encoder: &encoder !ConvEncoder 
  channels: (64, 128)
  n_residual_blocks: *n_residual_blocks

hyper_encoder: &hyper_encoder !ConvEncoder 
  channels: (64,)
  in_channels: 128
  n_residual_blocks: *n_residual_blocks

decoder: &decoder !ConvDecoder 
  channels: `(128, 64)`
  n_residual_blocks: *n_residual_blocks

hyper_decoder: &hyper_decoder !ConvDecoder 
  channels: `(64,)`
  out_channels: 128
  n_residual_blocks: *n_residual_blocks

model_template: &model_template !ConvScaleHyperpriorModel 
  encoder: *encoder
  decoder: *decoder
  hyper_encoder: *hyper_encoder
  hyper_decoder: *hyper_decoder

model: &model !pretrained 
  model: *model_template
  eval_mode: False
  freeze_model: False
  module_name: "_model"
  ckpt_path: *pretrained_stage_1_path


aux_loss: &aux_loss !AuxLoss 
loss: &loss !CompositeLoss 
  components: `[(aux_loss, 1.)]`


pl_module: !LitAutoEncoderModule 
  model: *model
  optimizer: !Adam 
    lr: *lr
    params: `model.aux_parameters()`
  loss: *loss
  sample_train: `train_dataset[0]`
  sample_val: `val_dataset[0]`
